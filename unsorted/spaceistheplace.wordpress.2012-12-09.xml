<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>

	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://fredsix.wordpress.com/osd.xml" title="space is the place" />
	<atom:link rel='hub' href='http://fredsix.wordpress.com/?pushpress=hub'/>

	<item>
		<title>Models and the natural transformations between them</title>
		<link>http://fredsix.wordpress.com/?p=49</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[This post is based on sections 4.1 &amp; 4.2 of Barr and Wells, <em>Category theory for computing science</em>
Some preliminary definitions:

<strong>Quiver </strong>- Directed multigraph. See <a href="http://ncatlab.org/nlab/show/quiver">http://ncatlab.org/nlab/show/quiver</a> . Barr&amp;Wells call this a "graph"

<strong>Diagram </strong>- A quiver homomorphism.

<strong>Commuting diagram </strong>- A quiver homomorphism (diagram) where the target quiver is the underlying graph of a category and where for any two points in the source graph, any two different paths between them get mapped (via the diagram) to two paths in the underlying graph that commute in the category.

<strong>Model</strong> - A diagram (not necessarily commutative) from a quiver G to (the underlying graph of) <strong>Set</strong>. Barr &amp; Wells invent, as an example of a model, a "u-structure", which is a set equipped with a unary function on the S. Then a diagram from a graph with one node and a self-arrow to the category <strong>Set</strong> is a "u-structure", so  the diagram is called a <strong>model</strong> of a u-structure. They later broaden this definition from <strong>Set</strong> to any category.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2012-10-21 22:00:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Euclid&#039;s Elements, Book 1, part 1</title>
		<link>http://fredsix.wordpress.com/2012/11/21/euclids-elements-book-1-part-1/</link>
		<pubDate>Wed, 21 Nov 2012 04:02:50 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[The postulates and propositions that Euclid deals in seem to come in two flavors: constructions and facts. It is interesting to note that three of Euclid's five postulates are construction postulates, while the last two, including the fifth, the infamous <em>parallel postulate</em>, are facts. I like to think of the constructions as subroutines you can execute.

<strong>Postulates</strong>
<ol>
	<li>Subroutine SLS(Point p1, Point p2) takes two points and produces a straight line segment</li>
	<li>Subroutine SL(LineSegment seg) takes a straight line segment and extends it to an infinite line containing the  line segment</li>
	<li>Subroutine Circ(LineSegment seg, Point p) takes a straight line segment and a point and creates a circle at the point with a radius equal to the length of the line segment</li>
	<li>All right angles are equal to each other</li>
	<li>If a straight line falls across two other straight lines and the resulting internal angles sum to less than two right angles, then extending these lines infinitely will result in the the lines meeting on the same side (i.e. the internal angles will form the base angles for a triangle).</li>
</ol>
I'm going to assume that you know what points, lines and circles are. The only thing you may be confused about is the definition of <em>right angle</em>, which is "angles that result when a straight line stands on another straight line and the adjacent angles that they form are equal". Postulate 4 then asserts that two pairs of right angles are all equal to one another.

Right then, let's prove some propositions.

<strong>1.1. Constructing an equilateral triangle from a given straight line segment</strong>
<pre>define EqTri(LineSegment seg):
    circ1 = Circ(seg, seg.p1)
    circ2 = Circ(seg, seg.p2)
    C = arbitrary point from intersection of circ1 and circ2.
    X = SLS(seg.p1, C)
    Y = SLS(seg.p2, C)
    return Tri(seg, X, Y)</pre>
(Note that I've assumed that a straight line segment has two c fields, p1 and p2, which I've implicitly assumed are the extremities of the line segment)

EqTri returns an equilateral triangle of which <code>seg</code> (say with extremity points A and B) forms one of the sides. To see this, note that C is seg's length from A and seg's length from B. Thus the returned triangle has each side equal to the length of seg.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2012-11-21 04:02:50</wp:post_date>
		<wp:post_date_gmt>2012-11-21 04:02:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>euclids-elements-book-1-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1353470571]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Euclid’s Elements, Book 1, part 2</title>
		<link>http://fredsix.wordpress.com/2012/11/22/euclids-elements-book-1-part-2/</link>
		<pubDate>Thu, 22 Nov 2012 23:21:17 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>1.2 Given a point and a straight line segment, you can draw a straight line segment of equal length at the point</strong>
<pre>define MoveSLSToPoint(Point P, LineSegment seg):
    B = seg.p1
    C = seg.p2
    L = SLS(P, B)
    T = EqTri(L)
    Circ1 = Circ(seg, B)
    Z = the point of T that isn't B or C
    E = the point where LS(SLS(Z, B)) cuts Circ1
    Circ2 = Circ(SLS(Z,E), Z)
    F = the point where LS(SLS(Z,P)) cuts  Circ2
    return SLS(P, B)</pre>
The crux is that ZP and ZB are equal length since they are the sides of an equilateral triangle, and BE is  equal in length to our given segment BC by construction (the circle), so using ZE as the radius for a second circle, we get a line ZF which is equal in length to ZE by construction. Subtracting from ZP from ZF we get PF, which is equal to ZE - ZB = BE = BC. So we just moved the line to P.

<strong>1.3 Given two unequal lines, you can cut the greater off to the length of the lesser.</strong>
<pre>define CutOff(LineSegment greater, LineSegment lesser):
    M = MoveSLSToPoint(greater.p1, lesser)
    C = Circ(M, greater.p1)
    E = point where greater cuts C
    return SLS(greater.p1, E</pre>
We use 1.2 to move the lesser to one of the endpoints of the greater segment. Then we cut off a lesser-sized segment from greater using a circle.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2012-11-22 23:21:17</wp:post_date>
		<wp:post_date_gmt>2012-11-22 23:21:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>euclids-elements-book-1-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1353626478]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;Eventually&quot; &amp; the Order limit theorem</title>
		<link>http://fredsix.wordpress.com/2012/12/01/eventually-the-order-limit-theorem/</link>
		<pubDate>Sat, 01 Dec 2012 19:08:13 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will discuss the Order Limit Theorem and it's slight generalization using the notion of "eventually".

First, the Order Limit Theorem.

<strong>Order Limit Theorem: </strong>Assume $latex (a_n) \rightarrow a$, $latex (b_n) \rightarrow b$. Then:
<ol>
	<li>If $latex \forall n a_n \geq 0$ then $latex a \geq 0$.</li>
	<li>If $latex \forall n a_n \geq b_n$ then $latex a \geq b$.</li>
	<li>If there's a $latex c \in \mathbb{R}$ for which $latex \forall n a_n \geq c$, then $latex a \geq c$. Ditto for the dual case of $latex a_n \leq c$.</li>
</ol>
<em>Proof: </em>(1) If each term of $latex (a_n)$ is nonnegative, then the limit $latex a$ couldn't possibly be negative because if it were, then you  could take $latex \epsilon = |a|$ and not be able to find any terms of $latex (a_n)$ within the $latex \epsilon$-ball (since each term is at least zero).

(2) If for each $latex n$, $latex a_n \geq b_n$, then since these two sequences converge, we can form the sequence $latex (a_n - b_n)$ which converges to $latex a - b$ by the Algebraic Limit Theorem. Each term of this new sequence is greater than zero, so by (1) $latex a - b &gt; 0$, or $latex a &gt; b$.

(3) We can make a sequence $latex (c_n)$ where $latex c_n = c$ for all $latex n$. Then apply (2) to get $latex a \geq c$ (or $latex a \leq c$ if that's how you roll). QED.

We need thisdefinition:

A sequence $latex (a_n)$ is <strong>eventually</strong> in set A if there's a point $latex N$ after which terms of $latex (a_n)$ are all in $latex A$ (i.e. $latex n \geq N \implies a_n \in A$).

I'm a big fan of decomposing definitions, and you can see that in some sense this defintion should come prior to the definition of the limit of a sequence. Let's refactor the definition of a limit:

The <strong>limit </strong>of a sequence $latex (a_n)$ is a number $latex x$ such that, for any $latex \epsilon &gt; 0$, the sequence is eventually in $latex (x - \epsilon, x + \epsilon)$.

And now for the crown jewel:

<strong>Slightly Generalized Order Limit Theorem: </strong>Assume $latex (a_n) \rightarrow a$, $latex (b_n) \rightarrow b$. Then:
<ol>
	<li>If $latex \exists N \forall n \geq N a_n \geq 0$ then $latex a \geq 0$.</li>
	<li>If $latex \exists N \forall n \geq N a_n \geq b_n$ then $latex a \geq b$.</li>
	<li>If there's a $latex c \in \mathbb{R}$ for which $latex \exists N \forall n \geq N a_n \geq c$, then $latex a \geq c$. Ditto for the dual case of $latex a_n \leq c$.</li>
</ol>
<em>Proof<strong>: </strong></em>(1) Suppose $latex a &lt; 0$. As before, we can take $latex \epsilon = |a|$. Then $latex (a_n)$ can not eventually get inside $latex (a - \epsilon, a + \epsilon)$ because after $latex N$, each $latex a_n$ is nonnegative. So $latex a \geq 0$.

(2) Use (1) as above.

(3) Use (2) as above.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2012-12-01 19:08:13</wp:post_date>
		<wp:post_date_gmt>2012-12-01 19:08:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eventually-the-order-limit-theorem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1354388895]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Open and Closed sets</title>
		<link>http://fredsix.wordpress.com/2012/12/05/open-and-closed-sets/</link>
		<pubDate>Wed, 05 Dec 2012 01:41:45 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[In a metric space, an <strong>open ball around a </strong>is a set of elements that are <em>less than</em> a distance $latex \epsilon$ from some point $latex a$, i.e. the set $latex \left\{{x : d(x,a) &lt; \epsilon}\right\}$. Since I'm interested in $latex \mathbb{R}$ in particular, using the standard distance metric, this definition becomes: a set $latex \left\{{x \in \mathbb{R} : |x-a| &lt; \epsilon}\right\}$. We also say that it's an $latex \epsilon$-ball around $latex a$ or an $latex \epsilon$-neighborhood.

A set is <strong>open</strong> if every point in the set has an $latex \epsilon$-ball that fits inside the set.

Here's an important fact about open sets, which forms the basis of topological spaces!

<strong>Theorem: </strong>(1) Arbitrary unions of open sets are open. (2) Finite intersections of open sets are open.

<em>Proof: </em>(1) Given some family $latex \mathcal{F}$ of subsets of $latex \mathbb{R}$, $latex A = \bigcup \mathcal{F}$ is open because $latex a \in A$ must be in one of the sets, call it $latex U$, of $latex \mathcal{F}$, and since $latex U$ is open, there's an open ball contained in $latex U$, hence also in $latex A$.

(2) If $latex \left\{{U_1, \ldots, U_n}\right\}$ are open sets, then $latex S = \bigcap_{i = 1}^{n} U_i$ must be open, for if you take arbitrary $latex s \in S$, then it's in every $latex U_i$, so there's some open ball $latex O_i$ that's inside each $latex U_i$. Take the smallest open ball, $latex O_k$, and it's in every $latex U_i$, so it's in $latex S$ as well. QED.

Why can't we say that arbitrary intersections of open sets are open too? Where does the proof of (2) fail if we have an infinite family of open sets? It really consists in the fact that we have an infinite set of open ball radii, $latex C$, we aren't guaranteed to be able to find a minimum element.

Here's an important definition: a <strong>limit point </strong>of set $latex A$ is an element $latex x \in \mathbb{R}$ for which every open ball around $latex x$ contains a point of $latex A - \left\{{x}\right\}$. A limit point is an element which is <em>approximable </em>by elements of $latex A$ distinct from $latex x$ (in the sense that you can make a sequence of elements of $latex A$ that converge to $latex x$ (and that aren't just the constant sequence $latex (x, x, x, \ldots)$.)

Here's that promised theorem about limit points and sequences that converge to them:

<strong>Theorem: </strong>$latex x$ is a limit point of $latex A$ iff there's a sequence $latex (a_n) \rightarrow x$ and each $latex a_n \in A - \left\{{x}\right\}$.

<em>Proof:</em> $latex (\Rightarrow)$ if $latex x$ is a limit point then we can take the $\latex \epsilon$-balls for $latex \epsilon_n = \frac{1}{n}$. Inside each $latex \epsilon_n$ we have some $latex a \in A, a \neq x$, so set $latex a_n = a$. This constructs a sequence of elements of $latex A - \left\{{x}\right\}$ that converges to $latex x$.

$latex (\Leftarrow)$ If theres a sequence $latex (a_n) \rightarrow x$ contained in $latex A - \left\{{x}\right\}$ that converges to $latex x$, then any $latex \epsilon$-ball around $latex x$ contains elements of $latex A - \left\{{x}\right\}$ because for every $latex \epsilon$ there's a point in the sequence after which terms of the sequence are all within the $latex \epsilon$-ball around $latex x$. But terms of the sequence are elements of $latex A$ that are not equal to $latex x$ (by hypothesis), so $latex x$ is a limit point. QED]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2012-12-05 01:41:45</wp:post_date>
		<wp:post_date_gmt>2012-12-05 01:41:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-and-closed-sets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1354671705]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vector spaces and linear independence</title>
		<link>http://fredsix.wordpress.com/2012/12/06/vector-spaces-and-linear-independence/</link>
		<pubDate>Thu, 06 Dec 2012 04:38:55 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[If you go back to my earlier post in November 2012  (which I am too lazy to link to), you will find that I talked about fields already. So I will briefly restate:

A <strong>field </strong>is a non-trivial commutative ring where every non-zero element has a multiplicative inverse.

A <strong>vector space </strong>is a triplet $latex (F, V, \ast: F \times V \rightarrow V)$ where $latex F$ is a field, $latex V$ is an abelian group, $latex (V, \ast$ is a <a href="http://en.wikipedia.org/wiki/Group_with_operators">group with operators</a> (i.e. currying $latex \ast$ with each $latex f \in F$ yields a group endomorphism on $latex V$) and where the following three postulates hold:
<ol>
	<li>$latex (a + b) \ast v = a \ast v + b \ast v$</li>
	<li>$latex (ab) \ast v = a \ast (b \ast v)$</li>
	<li>$latex 1 \ast v = v$</li>
</ol>
(Interestingly, the last 2 properties say that $latex \ast$ is a monoid action of $latex F$ on $latex V$ (since the multiplication operation is a monoid in a field).)

The elements of the field $latex F$ are called <strong>scalars</strong>.

If you take some set $latex x_1, \ldots, x_n$ of vectors and some corresponding set $latex a_1, \ldots, a_n$ of scalars, and form the sum of products $latex a_1 x_1 + \cdots + a_n x_n$, this result is called a <strong>linear combination</strong> of the vectors.

Now, a set of vectors $latex \left\{{x_i}\right\}$ is <strong>linearly dependent </strong>if there exists a set $latex \left\{{a_i}\right\}$ of scalars for which one of the scalars $latex a_k$ is nonzero and $latex \Sigma_i a_i x_i = 0$. A set is <strong>linearly independent</strong> if $latex \Sigma_i a_i x_i = 0$ implies $latex a_i = 0$ for all $latex i$. That is, linearly independent means that the only way for a linear combination of the vectors to result in the zero vector is for all the scalars to be zero.

(I'm going off of Halmos for this, and he does something a bit strange by defining linear independence vacuously as well. So the empty set is linearly independent vacuously because it cannot possibly be linearly dependent (there is no non-zero scalar to be found)).

This is a pretty abstract definition (why do we care about how to get zero from linear combinations?), but the importance is revealed by the following lemma:

<strong>Lemma:</strong> If the set of vectors $latex \left\{{x_i}\right\}$ is linearly independent then $latex x$ is a linear combination of the $latex \left\{{x_i}\right\}$ iff $latex \left\{{x}\right\} \cup \left\{{x_i}\right\}$ is linearly dependent.

<em>Proof: </em>Supposing the $latex x_i$'s are linearly independent, then if $latex x$ is a linear combination of them, then for some set of $latex b_i$'s, $latex x = \Sigma_i b_i x_i$. So we can take $latex b = -1$ and get $latex b x + \Sigma_i b_i x_i = 0$ and at least one of the scalars is nonzero, proving that adding $latex x$ to the $latex x_i$'s makes the new set linearly dependent.

For the converse, assume that the $latex x$ plus $latex x_i$'s are linearly dependent. So either $latex b \neq 0$ or some $latex b_k \neq 0$ for $latex b x + \Sigma_i b_i x_i = 0$. If $latex b \neq 0$ then we can divide the whole equation out by $latex b$ and subtract the linear combination of $latex x_i$'s to the other side, which expresses $latex x$ as a linear combination of the $latex x_i$'s (which is what we're trying to find). So suppose that $latex b = 0$ and that some $latex b_k \neq 0$ instead. We have:

$latex bx + \Sigma_i b_i x_i = 0 + \Sigma_i b_i x_i =\Sigma_i b_i x_i = 0$

And $latex b_k \neq 0$, so the $latex \left\{{x_i}\right\}$ is linearly dependent, contrary to our first assumption. So $latex b \neq 0$ and $latex x$ is a linear combination of the $latex x_i$'s. QED.

Actually, we didn't need that lemma to see the significance of the "linearly dependent" definition, because the key idea is that, with a linearly dependent set, some linear combination of the vectors with one of the scalars nonzero, call it $latex b$, results in the zero vector, so we can divide the equation by $latex -b$ to express one of the vectors as a linear combination of the others. That's really the main point: we could throw away one of the vectors and still not miss it (due to being able to reconstruct it as a linear combination of the others).

To round out this post I will finish with what Halmos calls "the  fundamental result concerning linear dependence":

<strong>Theorem: </strong>The n-tuple $latex (x_1, \ldots, x_n)$ is linearly dependent iff there's some $latex k$, $latex 2 \leq k \leq n$ for which $latex x_k$ is a linear combination of $latex \left\{{x_1, \ldots, x_{k-1}}\right\}$.

<em>Proof: </em>$latex (\Rightarrow)$ If $latex (x_1, \ldots, x_n)$ is linearly dependent, then pick the smallest $latex k$ such that $latex x_1, \ldots, x_k$  is linearly dependent (we could, at the very least, select $latex k=n$. Since the set of all $latex j$ such that $latex x_1, \ldots, x_j$ is linearly dependent is nonempty, by the well-ordering principle it has a smallest element.) $latex \left\{{x_1, \ldots, x_{k-1}}\right\}$ must be linearly independent, for if it were otherwise, it would contradict $latex k$ being smallest. In addition, adding $latex x_k$ to it makes it linearly dependent, so $latex x_k$ must be a linear combination of the preceding elements by the lemma above.

$latex (\Leftarrow)$ Clearly the converse holds. If one of the $latex x_k$ is a linear combination of the preceding vectors, then we can obtain zero with $latex \Sigma_{i=1}^{k} (a_i x_i) - x + \Sigma_{i=k+1}^{n} 0 x_i$.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2012-12-06 04:38:55</wp:post_date>
		<wp:post_date_gmt>2012-12-06 04:38:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vector-spaces-and-linear-independence</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1354768737]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Basii</title>
		<link>http://fredsix.wordpress.com/2012/12/09/basii/</link>
		<pubDate>Sun, 09 Dec 2012 04:41:46 +0000</pubDate>
		<dc:creator>fredsix</dc:creator>
		<guid isPermaLink="false">http://fredsix.wordpress.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[This post is about bases of vector spaces and a crucial property of them: that every linearly independent set of vectors can be extended to a basis (and, thus, that every vector space has a basis). There are two sides to this, actually: there's an easy proof that's restricted to finite dimensional vector spaces, and then there's the general proof for arbitrary vector spaces that uses Zorn's Lemma. I will cover both, because the infinite case is not too hard and rather fun.

<strong>Definition: </strong>The <strong>span</strong> of a set of vectors is the set of all linear combinations of the vectors.

<strong>Definition: </strong>A <strong>basis</strong> for a vector space $latex V$ is a linearly independent set $latex B$ for which $latex span B = V$.

<strong>Definition: </strong>A vector space is <strong>finite-dimensional </strong>if a finite basis exists for it.

<strong>Lemma/Theorem/whatever: </strong>A given basis  $latex B$ determines unique set of coefficients for each $lavex v \in V$ such that $latex v = \Sigma_i \alpha_i b_i$.

<em>Proof: </em>if $latex v = \Sigma_i \alpha_i b_i = \Sigma_i \xi_i b_i$, then $latex 0 = \Sigma_i (\alpha_i - \xi_i) b_i$. Since $latex B$ is a basis, it's linearly independent, so each $latex \alpha_i - \xi_i = 0$, aka $latex \alpha_i = \xi_i$. QED

Another way of looking (at this is as saying that the function defined from basis set (bases n-tuple, really) to n-tuple of linear combination coefficients is well-defined.

<strong>Theorem: </strong>In a finite-dimensional vector space $latex V$, any linearly independent set $latex A = \left\{{y_1, \ldots, y_k}\right\}$ can be extended to a basis $latex \left\{{y_1, \ldots, y_k, y_{k+1}, \ldots, y_n}\right\} for $latex V$.

<em>Fake Proof:</em>  If $latex A$ is a basis, we're done. Otherwise, some vector $latex v_1 \in V$ is not a linear combination of $latex A$, so set $latex A_1 = A \cup \left\{{v_1}\right\}$. Now repeat; if $latex A_1$ is a basis, we're done, otherwise we can find a $latex v_2$ which is not a linear combination of $latex A_1$. Since $latex V$ is finite dimensional, this construction will eventually find a basis. QED.

Why does the fake proof not work? It's actually fine up to the last line, and it would work if we knew that every basis for a vector space was the same size. (To expand on this: "finite-dimensional" at this point simply means that there's some set for which every vector in $latex V$ is a linear combination of the set. We know there's one such set, but we have no information about what happens when we string together another collection of linearly independent vectors of the same size as the basis.) Since we have not yet proved this, we must resort to a different proof:

<em>Proof:  </em>Since our previous strategy of adding vectors failed because we couldn't guarantee that it would terminate, we will try the opposite strategy: we have a basis $latex \left\{{x_1, \ldots, x_n}\right\}$, so let's add <em>too many</em> vectors to begin, and take them out until the set is linearly indepenent again.

So we take our linearly independent set $latex \left\{{y_1, \ldots, y_k}\right\}$ and the basis and smash them together into a tuple: $latex \left\{{y_1, \ldots, y_k, x_1, \ldots, x_n}\right\}$. This set of vectors is linearly dependent (each $latex y$ is a linear combination of the basis elements), so by the theorem we proved in the last post, there's one element which is a linear combination of the preceding elements. Furthermore, it can't be one of the $latex y_i$'s, because those are linearly independent. So there's some $latex j$ such that $latex x_j$ is in the span of $latex A \cup \left\{{x_1, \ldots, x_{j-1}}\right\}$.

The idea is to just remove that $latex x_j$, resulting in $latex y_1, \ldots, y_k, x_1, \ldots, x_{j-1}, x_{j+1}, \ldots, x_n$. This set still spans $latex V$ because any vector requiring a nonzero coefficient of $latex x_j$ can just use the linear combination to substitute for $latex x_j$. Keep removing basis elements until the set is no longer linearly dependent. At each step, the span never changes, so the result is a basis. QED.

That was instructive, but let's go for the general case. Halmos indicates that this requires "transfinite trickery", but I'm not so certain about that..

<strong>Theorem: </strong>Every vector space has a basis.

<em>Proof: </em>We need an initial result -- the Kuratowski/Zorn Lemma -- which says:

<em>Kuratowski/Zorn Lemma: </em>For any poset $latex P$, if every chain (totally ordered subset) is bounded above, then $latex P$ has a maximal element.

Now take the set $latex \mathcal{L}$ of all linearly independent subsets of $latex V$. This is a poset by set inclusion. For any chain $latex \mathcal{C}$ in $latex \mathcal{L}$, the union $latex \bigcup \mathcal{C}$ is in $latex \mathcal{L}$ because, for any finite subset $latex A$ of $latex \bigcup \mathcal{C}$, there's a linearly independent set $latex C$ for each $latex a \in A$ that (1) contains $latex a$ and (2) is in $latex \mathcal{C}$. Since it's a chain, the biggest of these chains actually contains all elements of $latex A$. So every finite subset of $latex \bigcup \mathcal{C}$ is linearly independent, hence the union is independent. So the union is clearly an upper bound in $latex \mathcal{L}$. So it satisfies the premises for K/L, and hence $latex \mathcal{L}$ has a maximal element $latex M$. This is linearly independent (it's in $latex \mathcal{L}$), so we simply need to prove that it spans $latex V$.

If $latex x \notin M$, we know that $latex X = M \cup \left\{{x}\right\}$ can't be linearly independent, because $latex M$ is maximal. So $latex X$ is linearly dependent, meaning that some finite subset $latex U$ is linearly dependent. $latex U$ must contain $latex x$, otherwise $latex U$ would be a subset of $latex M$, making $latex M$ not linearly independent. Furthermore $latex U - \left\{{x}\right\}$ is linearly independent, so by a theorem in the previous post, $latex x$ must be a linear combination of the $latex U - \left\{{x}\right\}$. Thus $latex x$ is in $latex span M$ after all. QED.

The Kuratowski/Zorn Lemma is equivalent to the Axiom of Choice. That's the price of great power.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2012-12-09 04:41:46</wp:post_date>
		<wp:post_date_gmt>2012-12-09 04:41:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25949232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>superawesome</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1355028106]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
